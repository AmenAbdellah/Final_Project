
Last_Pwm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000932  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00000932  000009c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080007e  0080007e  000009e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012ae  00000000  00000000  00000b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009dd  00000000  00000000  00001dfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000981  00000000  00000000  000027db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000214  00000000  00000000  0000315c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000500  00000000  00000000  00003370  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b22  00000000  00000000  00003870  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00004392  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e3       	ldi	r30, 0x32	; 50
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 37       	cpi	r26, 0x7E	; 126
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e7       	ldi	r26, 0x7E	; 126
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 38       	cpi	r26, 0x86	; 134
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 51 01 	call	0x2a2	; 0x2a2 <main>
  8a:	0c 94 97 04 	jmp	0x92e	; 0x92e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_voidInit>:
#include "DIO_config.h"
#include "DIO_private.h"

void DIO_voidInit(void)
{
	DDRA = DIO_U8_DIRA;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	8a bb       	out	0x1a, r24	; 26
	DDRB = DIO_U8_DIRB;
  96:	88 e0       	ldi	r24, 0x08	; 8
  98:	87 bb       	out	0x17, r24	; 23
	DDRC = DIO_U8_DIRC;
  9a:	87 e0       	ldi	r24, 0x07	; 7
  9c:	84 bb       	out	0x14, r24	; 20
	DDRD = DIO_U8_DIRD;
  9e:	11 ba       	out	0x11, r1	; 17
  a0:	08 95       	ret

000000a2 <__vector_6>:
	ICU_CallBack = Copy_ptr ;
}

void __vector_6(void) __attribute__((signal , used)); // for avr gcc
void __vector_6(void)
{
  a2:	1f 92       	push	r1
  a4:	0f 92       	push	r0
  a6:	0f b6       	in	r0, 0x3f	; 63
  a8:	0f 92       	push	r0
  aa:	11 24       	eor	r1, r1
  ac:	2f 93       	push	r18
  ae:	3f 93       	push	r19
  b0:	4f 93       	push	r20
  b2:	5f 93       	push	r21
  b4:	6f 93       	push	r22
  b6:	7f 93       	push	r23
  b8:	8f 93       	push	r24
  ba:	9f 93       	push	r25
  bc:	af 93       	push	r26
  be:	bf 93       	push	r27
  c0:	ef 93       	push	r30
  c2:	ff 93       	push	r31
	
	ICU_CallBack();
  c4:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <ICU_CallBack>
  c8:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <ICU_CallBack+0x1>
  cc:	09 95       	icall
}
  ce:	ff 91       	pop	r31
  d0:	ef 91       	pop	r30
  d2:	bf 91       	pop	r27
  d4:	af 91       	pop	r26
  d6:	9f 91       	pop	r25
  d8:	8f 91       	pop	r24
  da:	7f 91       	pop	r23
  dc:	6f 91       	pop	r22
  de:	5f 91       	pop	r21
  e0:	4f 91       	pop	r20
  e2:	3f 91       	pop	r19
  e4:	2f 91       	pop	r18
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <LCD_Cmd_Fun>:
	if (row == 0 && pos<16)
	LCD_Cmd_Fun((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LCD_Cmd_Fun((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
	LCD_String(str);		/* Call LCD string function */
}
  f0:	8b bb       	out	0x1b, r24	; 27
  f2:	85 b3       	in	r24, 0x15	; 21
  f4:	8e 7f       	andi	r24, 0xFE	; 254
  f6:	85 bb       	out	0x15, r24	; 21
  f8:	85 b3       	in	r24, 0x15	; 21
  fa:	8d 7f       	andi	r24, 0xFD	; 253
  fc:	85 bb       	out	0x15, r24	; 21
  fe:	85 b3       	in	r24, 0x15	; 21
 100:	84 60       	ori	r24, 0x04	; 4
 102:	85 bb       	out	0x15, r24	; 21
 104:	83 ef       	ldi	r24, 0xF3	; 243
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <LCD_Cmd_Fun+0x18>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <LCD_Cmd_Fun+0x1e>
 10e:	00 00       	nop
 110:	85 b3       	in	r24, 0x15	; 21
 112:	8b 7f       	andi	r24, 0xFB	; 251
 114:	85 bb       	out	0x15, r24	; 21
 116:	08 95       	ret

00000118 <LCD_Data_Fun>:
 118:	8b bb       	out	0x1b, r24	; 27
 11a:	85 b3       	in	r24, 0x15	; 21
 11c:	81 60       	ori	r24, 0x01	; 1
 11e:	85 bb       	out	0x15, r24	; 21
 120:	85 b3       	in	r24, 0x15	; 21
 122:	8d 7f       	andi	r24, 0xFD	; 253
 124:	85 bb       	out	0x15, r24	; 21
 126:	85 b3       	in	r24, 0x15	; 21
 128:	84 60       	ori	r24, 0x04	; 4
 12a:	85 bb       	out	0x15, r24	; 21
 12c:	83 ef       	ldi	r24, 0xF3	; 243
 12e:	91 e0       	ldi	r25, 0x01	; 1
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <LCD_Data_Fun+0x18>
 134:	00 c0       	rjmp	.+0      	; 0x136 <LCD_Data_Fun+0x1e>
 136:	00 00       	nop
 138:	85 b3       	in	r24, 0x15	; 21
 13a:	8b 7f       	andi	r24, 0xFB	; 251
 13c:	85 bb       	out	0x15, r24	; 21
 13e:	08 95       	ret

00000140 <LCD_init>:
 140:	88 e3       	ldi	r24, 0x38	; 56
 142:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_Cmd_Fun>
 146:	83 ef       	ldi	r24, 0xF3	; 243
 148:	91 e0       	ldi	r25, 0x01	; 1
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <LCD_init+0xa>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <LCD_init+0x10>
 150:	00 00       	nop
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_Cmd_Fun>
 158:	83 ef       	ldi	r24, 0xF3	; 243
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <LCD_init+0x1c>
 160:	00 c0       	rjmp	.+0      	; 0x162 <LCD_init+0x22>
 162:	00 00       	nop
 164:	82 e0       	ldi	r24, 0x02	; 2
 166:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_Cmd_Fun>
 16a:	83 ef       	ldi	r24, 0xF3	; 243
 16c:	91 e0       	ldi	r25, 0x01	; 1
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <LCD_init+0x2e>
 172:	00 c0       	rjmp	.+0      	; 0x174 <LCD_init+0x34>
 174:	00 00       	nop
 176:	86 e0       	ldi	r24, 0x06	; 6
 178:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_Cmd_Fun>
 17c:	83 ef       	ldi	r24, 0xF3	; 243
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <LCD_init+0x40>
 184:	00 c0       	rjmp	.+0      	; 0x186 <LCD_init+0x46>
 186:	00 00       	nop
 188:	80 e8       	ldi	r24, 0x80	; 128
 18a:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_Cmd_Fun>
 18e:	83 ef       	ldi	r24, 0xF3	; 243
 190:	91 e0       	ldi	r25, 0x01	; 1
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <LCD_init+0x52>
 196:	00 c0       	rjmp	.+0      	; 0x198 <LCD_init+0x58>
 198:	00 00       	nop
 19a:	08 95       	ret

0000019c <LCD_String>:
 19c:	0f 93       	push	r16
 19e:	1f 93       	push	r17
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
 1a4:	8c 01       	movw	r16, r24
 1a6:	c0 e0       	ldi	r28, 0x00	; 0
 1a8:	d0 e0       	ldi	r29, 0x00	; 0
 1aa:	03 c0       	rjmp	.+6      	; 0x1b2 <LCD_String+0x16>
 1ac:	0e 94 8c 00 	call	0x118	; 0x118 <LCD_Data_Fun>
 1b0:	21 96       	adiw	r28, 0x01	; 1
 1b2:	f8 01       	movw	r30, r16
 1b4:	ec 0f       	add	r30, r28
 1b6:	fd 1f       	adc	r31, r29
 1b8:	80 81       	ld	r24, Z
 1ba:	81 11       	cpse	r24, r1
 1bc:	f7 cf       	rjmp	.-18     	; 0x1ac <LCD_String+0x10>
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	1f 91       	pop	r17
 1c4:	0f 91       	pop	r16
 1c6:	08 95       	ret

000001c8 <LCD_Clear>:

void LCD_Clear()
{
	LCD_Cmd_Fun (0x01);		/* Clear display */
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_Cmd_Fun>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ce:	83 ef       	ldi	r24, 0xF3	; 243
 1d0:	91 e0       	ldi	r25, 0x01	; 1
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <LCD_Clear+0xa>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <LCD_Clear+0x10>
 1d8:	00 00       	nop
	_delay_ms(2);
	LCD_Cmd_Fun (0x80);		/* Cursor at home position */
 1da:	80 e8       	ldi	r24, 0x80	; 128
 1dc:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_Cmd_Fun>
 1e0:	08 95       	ret

000001e2 <PWM_Drawer>:




void PWM_Drawer() //function for drawing pwm signal
{
 1e2:	cf 92       	push	r12
 1e4:	df 92       	push	r13
 1e6:	ef 92       	push	r14
 1e8:	ff 92       	push	r15
 1ea:	0f 93       	push	r16
 1ec:	1f 93       	push	r17
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
	
	 
	int duty = (((TF-TR)*100)/(TR2-TR));
 1f2:	40 91 82 00 	lds	r20, 0x0082	; 0x800082 <TR>
 1f6:	50 91 83 00 	lds	r21, 0x0083	; 0x800083 <TR+0x1>
 1fa:	20 91 80 00 	lds	r18, 0x0080	; 0x800080 <TF>
 1fe:	30 91 81 00 	lds	r19, 0x0081	; 0x800081 <TF+0x1>
 202:	24 1b       	sub	r18, r20
 204:	35 0b       	sbc	r19, r21
 206:	64 e6       	ldi	r22, 0x64	; 100
 208:	62 9f       	mul	r22, r18
 20a:	c0 01       	movw	r24, r0
 20c:	63 9f       	mul	r22, r19
 20e:	90 0d       	add	r25, r0
 210:	11 24       	eor	r1, r1
 212:	60 91 7e 00 	lds	r22, 0x007E	; 0x80007e <__data_end>
 216:	70 91 7f 00 	lds	r23, 0x007F	; 0x80007f <__data_end+0x1>
 21a:	64 1b       	sub	r22, r20
 21c:	75 0b       	sbc	r23, r21
 21e:	0e 94 c8 03 	call	0x790	; 0x790 <__udivmodhi4>
	int get_up = (duty*8)/100;
 222:	cb 01       	movw	r24, r22
 224:	88 0f       	add	r24, r24
 226:	99 1f       	adc	r25, r25
 228:	88 0f       	add	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	64 e6       	ldi	r22, 0x64	; 100
 232:	70 e0       	ldi	r23, 0x00	; 0
 234:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <__divmodhi4>
 238:	7b 01       	movw	r14, r22
	int loop =0;
	int get_down = 8-get_up;
 23a:	08 e0       	ldi	r16, 0x08	; 8
 23c:	10 e0       	ldi	r17, 0x00	; 0
 23e:	06 1b       	sub	r16, r22
 240:	17 0b       	sbc	r17, r23
	LCD_Cmd_Fun(0xC0);
 242:	80 ec       	ldi	r24, 0xC0	; 192
 244:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_Cmd_Fun>
{
	
	 
	int duty = (((TF-TR)*100)/(TR2-TR));
	int get_up = (duty*8)/100;
	int loop =0;
 248:	c1 2c       	mov	r12, r1
 24a:	d1 2c       	mov	r13, r1
	int get_down = 8-get_up;
	LCD_Cmd_Fun(0xC0);
	while(loop<4)
 24c:	1d c0       	rjmp	.+58     	; 0x288 <PWM_Drawer+0xa6>
	{
		LCD_String("-");
 24e:	80 e6       	ldi	r24, 0x60	; 96
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_String>
		for(int up=1; up<get_up; up++)
 256:	c1 e0       	ldi	r28, 0x01	; 1
 258:	d0 e0       	ldi	r29, 0x00	; 0
 25a:	05 c0       	rjmp	.+10     	; 0x266 <PWM_Drawer+0x84>
			LCD_String("-");
 25c:	80 e6       	ldi	r24, 0x60	; 96
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_String>
	int get_down = 8-get_up;
	LCD_Cmd_Fun(0xC0);
	while(loop<4)
	{
		LCD_String("-");
		for(int up=1; up<get_up; up++)
 264:	21 96       	adiw	r28, 0x01	; 1
 266:	ce 15       	cp	r28, r14
 268:	df 05       	cpc	r29, r15
 26a:	c4 f3       	brlt	.-16     	; 0x25c <PWM_Drawer+0x7a>
 26c:	c1 e0       	ldi	r28, 0x01	; 1
 26e:	d0 e0       	ldi	r29, 0x00	; 0
 270:	05 c0       	rjmp	.+10     	; 0x27c <PWM_Drawer+0x9a>
			LCD_String("-");
		
			
		//LCD_String("-");
		for(int down=1; down<get_down; down++)
			LCD_String("_");
 272:	82 e6       	ldi	r24, 0x62	; 98
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_String>
		for(int up=1; up<get_up; up++)
			LCD_String("-");
		
			
		//LCD_String("-");
		for(int down=1; down<get_down; down++)
 27a:	21 96       	adiw	r28, 0x01	; 1
 27c:	c0 17       	cp	r28, r16
 27e:	d1 07       	cpc	r29, r17
 280:	c4 f3       	brlt	.-16     	; 0x272 <PWM_Drawer+0x90>
			LCD_String("_");
			
			
		loop++;
 282:	8f ef       	ldi	r24, 0xFF	; 255
 284:	c8 1a       	sub	r12, r24
 286:	d8 0a       	sbc	r13, r24
	int duty = (((TF-TR)*100)/(TR2-TR));
	int get_up = (duty*8)/100;
	int loop =0;
	int get_down = 8-get_up;
	LCD_Cmd_Fun(0xC0);
	while(loop<4)
 288:	84 e0       	ldi	r24, 0x04	; 4
 28a:	c8 16       	cp	r12, r24
 28c:	d1 04       	cpc	r13, r1
 28e:	fc f2       	brlt	.-66     	; 0x24e <PWM_Drawer+0x6c>
			LCD_String("_");
			
			
		loop++;
	}
}
 290:	df 91       	pop	r29
 292:	cf 91       	pop	r28
 294:	1f 91       	pop	r17
 296:	0f 91       	pop	r16
 298:	ff 90       	pop	r15
 29a:	ef 90       	pop	r14
 29c:	df 90       	pop	r13
 29e:	cf 90       	pop	r12
 2a0:	08 95       	ret

000002a2 <main>:



u16 TR=0,TF=0,TR2=0; //global variables to store the value of rising and falling

int main (void){
 2a2:	cf 93       	push	r28
 2a4:	df 93       	push	r29
 2a6:	cd b7       	in	r28, 0x3d	; 61
 2a8:	de b7       	in	r29, 0x3e	; 62
 2aa:	65 97       	sbiw	r28, 0x15	; 21
 2ac:	0f b6       	in	r0, 0x3f	; 63
 2ae:	f8 94       	cli
 2b0:	de bf       	out	0x3e, r29	; 62
 2b2:	0f be       	out	0x3f, r0	; 63
 2b4:	cd bf       	out	0x3d, r28	; 61
	
	
	u16 high=0,period=0;
	s8 frequency[14],dc[7];
	
	DIO_voidInit();
 2b6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidInit>
	
	
	LCD_init();
 2ba:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_init>
 2be:	87 ea       	ldi	r24, 0xA7	; 167
 2c0:	91 e6       	ldi	r25, 0x61	; 97
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <main+0x20>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <main+0x26>
 2c8:	00 00       	nop
	_delay_ms(100);
	LCD_Cmd_Fun(0x0C);
 2ca:	8c e0       	ldi	r24, 0x0C	; 12
 2cc:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_Cmd_Fun>
 2d0:	87 ea       	ldi	r24, 0xA7	; 167
 2d2:	91 e6       	ldi	r25, 0x61	; 97
 2d4:	01 97       	sbiw	r24, 0x01	; 1
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <main+0x32>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <main+0x38>
 2da:	00 00       	nop
	_delay_ms(100);
	
	u8 duty;
	
	PWM_init();
 2dc:	0e 94 1f 02 	call	0x43e	; 0x43e <PWM_init>
	
	while(1)
	{
		TCCR1A = 0x00;
 2e0:	1f bc       	out	0x2f, r1	; 47
		TCNT1=0;
 2e2:	1d bc       	out	0x2d, r1	; 45
 2e4:	1c bc       	out	0x2c, r1	; 44
		TIFR = (1<<ICF1);  	/* Clear ICF (Input Capture flag) flag */
 2e6:	80 e2       	ldi	r24, 0x20	; 32
 2e8:	88 bf       	out	0x38, r24	; 56

		TCCR1B = 0x41;  	/* Rising edge, no prescaler */
 2ea:	81 e4       	ldi	r24, 0x41	; 65
 2ec:	8e bd       	out	0x2e, r24	; 46
		while((TIFR&(1<<ICF1)) == 0);
 2ee:	08 b6       	in	r0, 0x38	; 56
 2f0:	05 fe       	sbrs	r0, 5
 2f2:	fd cf       	rjmp	.-6      	; 0x2ee <main+0x4c>
		TR = ICR1;  		/* Take value of capture register */
 2f4:	86 b5       	in	r24, 0x26	; 38
 2f6:	97 b5       	in	r25, 0x27	; 39
 2f8:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <TR+0x1>
 2fc:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <TR>
		TIFR =(1<<ICF1); 	/* Clear ICF flag */
 300:	80 e2       	ldi	r24, 0x20	; 32
 302:	88 bf       	out	0x38, r24	; 56
		
		TCCR1B = 0x01;  	/* Falling edge, no prescaler */
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	8e bd       	out	0x2e, r24	; 46
		while((TIFR&(1<<ICF1))== 0);
 308:	08 b6       	in	r0, 0x38	; 56
 30a:	05 fe       	sbrs	r0, 5
 30c:	fd cf       	rjmp	.-6      	; 0x308 <main+0x66>
		TF = ICR1;  		/* Take value of capture register */
 30e:	86 b5       	in	r24, 0x26	; 38
 310:	97 b5       	in	r25, 0x27	; 39
 312:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <TF+0x1>
 316:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <TF>
		TIFR =(1<<ICF1);  	/* Clear ICF flag */
 31a:	80 e2       	ldi	r24, 0x20	; 32
 31c:	88 bf       	out	0x38, r24	; 56
		
		
		TCCR1B = 0x41;  	/* Rising edge, no prescaler */
 31e:	81 e4       	ldi	r24, 0x41	; 65
 320:	8e bd       	out	0x2e, r24	; 46
		while((TIFR&(1<<ICF1)) == 0);
 322:	08 b6       	in	r0, 0x38	; 56
 324:	05 fe       	sbrs	r0, 5
 326:	fd cf       	rjmp	.-6      	; 0x322 <main+0x80>
		TR2 = ICR1;  		/* Take value of capture register */
 328:	86 b5       	in	r24, 0x26	; 38
 32a:	97 b5       	in	r25, 0x27	; 39
 32c:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <__data_end+0x1>
 330:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__data_end>
		TIFR = (1<<ICF1);  	/* Clear ICF flag */
 334:	80 e2       	ldi	r24, 0x20	; 32
 336:	88 bf       	out	0x38, r24	; 56
		

		TCCR1B = 0x00;  		/* Stop the timer */
 338:	1e bc       	out	0x2e, r1	; 46
		
		if(TF>TR && TF<TR2)  	/* Check for valid condition, 
 33a:	60 91 80 00 	lds	r22, 0x0080	; 0x800080 <TF>
 33e:	70 91 81 00 	lds	r23, 0x0081	; 0x800081 <TF+0x1>
 342:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <TR>
 346:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <TR+0x1>
 34a:	86 17       	cp	r24, r22
 34c:	97 07       	cpc	r25, r23
 34e:	08 f0       	brcs	.+2      	; 0x352 <main+0xb0>
 350:	65 c0       	rjmp	.+202    	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 352:	c0 90 7e 00 	lds	r12, 0x007E	; 0x80007e <__data_end>
 356:	d0 90 7f 00 	lds	r13, 0x007F	; 0x80007f <__data_end+0x1>
 35a:	6c 15       	cp	r22, r12
 35c:	7d 05       	cpc	r23, r13
 35e:	08 f0       	brcs	.+2      	; 0x362 <main+0xc0>
 360:	5d c0       	rjmp	.+186    	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
					to avoid timer overflow reading */
		{
			high=TF-TR;
 362:	8b 01       	movw	r16, r22
 364:	08 1b       	sub	r16, r24
 366:	19 0b       	sbc	r17, r25
			period=TR2-TR;
 368:	c8 1a       	sub	r12, r24
 36a:	d9 0a       	sbc	r13, r25
			

			
			u32 freq= ( (16000000/period)); /* Calculate frequency */
 36c:	e1 2c       	mov	r14, r1
 36e:	f1 2c       	mov	r15, r1
 370:	60 e0       	ldi	r22, 0x00	; 0
 372:	74 e2       	ldi	r23, 0x24	; 36
 374:	84 ef       	ldi	r24, 0xF4	; 244
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	a7 01       	movw	r20, r14
 37a:	96 01       	movw	r18, r12
 37c:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__divmodsi4>
 380:	49 01       	movw	r8, r18
 382:	5a 01       	movw	r10, r20
			
            float duty_cycle =((float) high /(float)period)*100; /* Calculate duty cycle */
 384:	b8 01       	movw	r22, r16
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	0e 94 cd 02 	call	0x59a	; 0x59a <__floatunsisf>
 38e:	2b 01       	movw	r4, r22
 390:	3c 01       	movw	r6, r24
 392:	c7 01       	movw	r24, r14
 394:	b6 01       	movw	r22, r12
 396:	0e 94 cd 02 	call	0x59a	; 0x59a <__floatunsisf>
 39a:	9b 01       	movw	r18, r22
 39c:	ac 01       	movw	r20, r24
 39e:	c3 01       	movw	r24, r6
 3a0:	b2 01       	movw	r22, r4
 3a2:	0e 94 25 02 	call	0x44a	; 0x44a <__divsf3>
 3a6:	20 e0       	ldi	r18, 0x00	; 0
 3a8:	30 e0       	ldi	r19, 0x00	; 0
 3aa:	48 ec       	ldi	r20, 0xC8	; 200
 3ac:	52 e4       	ldi	r21, 0x42	; 66
 3ae:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__mulsf3>
 3b2:	6b 01       	movw	r12, r22
 3b4:	7c 01       	movw	r14, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ltoa_ncheck (long, char *, unsigned char);
	return __ltoa_ncheck (__val, __s, __radix);
 3b6:	2a e0       	ldi	r18, 0x0A	; 10
 3b8:	ae 01       	movw	r20, r28
 3ba:	4f 5f       	subi	r20, 0xFF	; 255
 3bc:	5f 4f       	sbci	r21, 0xFF	; 255
 3be:	c5 01       	movw	r24, r10
 3c0:	b4 01       	movw	r22, r8
 3c2:	0e 94 3c 04 	call	0x878	; 0x878 <__ltoa_ncheck>
			
			ltoa(freq,frequency,10);
			
			itoa((int)duty_cycle,dc,10);
 3c6:	c7 01       	movw	r24, r14
 3c8:	b6 01       	movw	r22, r12
 3ca:	0e 94 97 02 	call	0x52e	; 0x52e <__fixsfsi>
 3ce:	dc 01       	movw	r26, r24
 3d0:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 3d2:	4a e0       	ldi	r20, 0x0A	; 10
 3d4:	be 01       	movw	r22, r28
 3d6:	61 5f       	subi	r22, 0xF1	; 241
 3d8:	7f 4f       	sbci	r23, 0xFF	; 255
 3da:	0e 94 31 04 	call	0x862	; 0x862 <__itoa_ncheck>
			
			LCD_Cmd_Fun(0x80);
 3de:	80 e8       	ldi	r24, 0x80	; 128
 3e0:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_Cmd_Fun>
			LCD_String("F:");
 3e4:	84 e6       	ldi	r24, 0x64	; 100
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_String>
			LCD_String(frequency);
 3ec:	ce 01       	movw	r24, r28
 3ee:	01 96       	adiw	r24, 0x01	; 1
 3f0:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_String>
			LCD_String("Hz");
 3f4:	87 e6       	ldi	r24, 0x67	; 103
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_String>
			
			LCD_Cmd_Fun(0x88);
 3fc:	88 e8       	ldi	r24, 0x88	; 136
 3fe:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_Cmd_Fun>
			LCD_String(" DC:");
 402:	8a e6       	ldi	r24, 0x6A	; 106
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_String>
			LCD_String(dc);
 40a:	ce 01       	movw	r24, r28
 40c:	0f 96       	adiw	r24, 0x0f	; 15
 40e:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_String>
			LCD_String("%");
 412:	8f e6       	ldi	r24, 0x6F	; 111
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_String>

		TCCR1B = 0x00;  		/* Stop the timer */
		
		if(TF>TR && TF<TR2)  	/* Check for valid condition, 
					to avoid timer overflow reading */
		{
 41a:	06 c0       	rjmp	.+12     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
			
		
		}
		else
		{
			LCD_Clear();
 41c:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LCD_Clear>
			LCD_String("out of range");
 420:	81 e7       	ldi	r24, 0x71	; 113
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_String>
 428:	83 ed       	ldi	r24, 0xD3	; 211
 42a:	90 e3       	ldi	r25, 0x30	; 48
 42c:	01 97       	sbiw	r24, 0x01	; 1
 42e:	f1 f7       	brne	.-4      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 430:	00 c0       	rjmp	.+0      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 432:	00 00       	nop
		}
		_delay_ms(50);
		
		PWM_Drawer();    //for drawing pwm signal
 434:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <PWM_Drawer>
/*-----------------------------*/
			OCR0= MY_OCR0_VALUE;      //value of generated pwm by timer0
 438:	83 e7       	ldi	r24, 0x73	; 115
 43a:	8c bf       	out	0x3c, r24	; 60
	}
 43c:	51 cf       	rjmp	.-350    	; 0x2e0 <main+0x3e>

0000043e <PWM_init>:
#include <avr/io.h>

void PWM_init()
{
	/*set fast PWM mode with non-inverted output*/
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
 43e:	8a e6       	ldi	r24, 0x6A	; 106
 440:	83 bf       	out	0x33, r24	; 51
	DDRB|=(1<<PB3);  /*set OC0 pin as output*/
 442:	87 b3       	in	r24, 0x17	; 23
 444:	88 60       	ori	r24, 0x08	; 8
 446:	87 bb       	out	0x17, r24	; 23
 448:	08 95       	ret

0000044a <__divsf3>:
 44a:	0e 94 39 02 	call	0x472	; 0x472 <__divsf3x>
 44e:	0c 94 21 03 	jmp	0x642	; 0x642 <__fp_round>
 452:	0e 94 1a 03 	call	0x634	; 0x634 <__fp_pscB>
 456:	58 f0       	brcs	.+22     	; 0x46e <__divsf3+0x24>
 458:	0e 94 13 03 	call	0x626	; 0x626 <__fp_pscA>
 45c:	40 f0       	brcs	.+16     	; 0x46e <__divsf3+0x24>
 45e:	29 f4       	brne	.+10     	; 0x46a <__divsf3+0x20>
 460:	5f 3f       	cpi	r21, 0xFF	; 255
 462:	29 f0       	breq	.+10     	; 0x46e <__divsf3+0x24>
 464:	0c 94 0a 03 	jmp	0x614	; 0x614 <__fp_inf>
 468:	51 11       	cpse	r21, r1
 46a:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__fp_szero>
 46e:	0c 94 10 03 	jmp	0x620	; 0x620 <__fp_nan>

00000472 <__divsf3x>:
 472:	0e 94 32 03 	call	0x664	; 0x664 <__fp_split3>
 476:	68 f3       	brcs	.-38     	; 0x452 <__divsf3+0x8>

00000478 <__divsf3_pse>:
 478:	99 23       	and	r25, r25
 47a:	b1 f3       	breq	.-20     	; 0x468 <__divsf3+0x1e>
 47c:	55 23       	and	r21, r21
 47e:	91 f3       	breq	.-28     	; 0x464 <__divsf3+0x1a>
 480:	95 1b       	sub	r25, r21
 482:	55 0b       	sbc	r21, r21
 484:	bb 27       	eor	r27, r27
 486:	aa 27       	eor	r26, r26
 488:	62 17       	cp	r22, r18
 48a:	73 07       	cpc	r23, r19
 48c:	84 07       	cpc	r24, r20
 48e:	38 f0       	brcs	.+14     	; 0x49e <__divsf3_pse+0x26>
 490:	9f 5f       	subi	r25, 0xFF	; 255
 492:	5f 4f       	sbci	r21, 0xFF	; 255
 494:	22 0f       	add	r18, r18
 496:	33 1f       	adc	r19, r19
 498:	44 1f       	adc	r20, r20
 49a:	aa 1f       	adc	r26, r26
 49c:	a9 f3       	breq	.-22     	; 0x488 <__divsf3_pse+0x10>
 49e:	35 d0       	rcall	.+106    	; 0x50a <__divsf3_pse+0x92>
 4a0:	0e 2e       	mov	r0, r30
 4a2:	3a f0       	brmi	.+14     	; 0x4b2 <__divsf3_pse+0x3a>
 4a4:	e0 e8       	ldi	r30, 0x80	; 128
 4a6:	32 d0       	rcall	.+100    	; 0x50c <__divsf3_pse+0x94>
 4a8:	91 50       	subi	r25, 0x01	; 1
 4aa:	50 40       	sbci	r21, 0x00	; 0
 4ac:	e6 95       	lsr	r30
 4ae:	00 1c       	adc	r0, r0
 4b0:	ca f7       	brpl	.-14     	; 0x4a4 <__divsf3_pse+0x2c>
 4b2:	2b d0       	rcall	.+86     	; 0x50a <__divsf3_pse+0x92>
 4b4:	fe 2f       	mov	r31, r30
 4b6:	29 d0       	rcall	.+82     	; 0x50a <__divsf3_pse+0x92>
 4b8:	66 0f       	add	r22, r22
 4ba:	77 1f       	adc	r23, r23
 4bc:	88 1f       	adc	r24, r24
 4be:	bb 1f       	adc	r27, r27
 4c0:	26 17       	cp	r18, r22
 4c2:	37 07       	cpc	r19, r23
 4c4:	48 07       	cpc	r20, r24
 4c6:	ab 07       	cpc	r26, r27
 4c8:	b0 e8       	ldi	r27, 0x80	; 128
 4ca:	09 f0       	breq	.+2      	; 0x4ce <__divsf3_pse+0x56>
 4cc:	bb 0b       	sbc	r27, r27
 4ce:	80 2d       	mov	r24, r0
 4d0:	bf 01       	movw	r22, r30
 4d2:	ff 27       	eor	r31, r31
 4d4:	93 58       	subi	r25, 0x83	; 131
 4d6:	5f 4f       	sbci	r21, 0xFF	; 255
 4d8:	3a f0       	brmi	.+14     	; 0x4e8 <__divsf3_pse+0x70>
 4da:	9e 3f       	cpi	r25, 0xFE	; 254
 4dc:	51 05       	cpc	r21, r1
 4de:	78 f0       	brcs	.+30     	; 0x4fe <__divsf3_pse+0x86>
 4e0:	0c 94 0a 03 	jmp	0x614	; 0x614 <__fp_inf>
 4e4:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__fp_szero>
 4e8:	5f 3f       	cpi	r21, 0xFF	; 255
 4ea:	e4 f3       	brlt	.-8      	; 0x4e4 <__divsf3_pse+0x6c>
 4ec:	98 3e       	cpi	r25, 0xE8	; 232
 4ee:	d4 f3       	brlt	.-12     	; 0x4e4 <__divsf3_pse+0x6c>
 4f0:	86 95       	lsr	r24
 4f2:	77 95       	ror	r23
 4f4:	67 95       	ror	r22
 4f6:	b7 95       	ror	r27
 4f8:	f7 95       	ror	r31
 4fa:	9f 5f       	subi	r25, 0xFF	; 255
 4fc:	c9 f7       	brne	.-14     	; 0x4f0 <__divsf3_pse+0x78>
 4fe:	88 0f       	add	r24, r24
 500:	91 1d       	adc	r25, r1
 502:	96 95       	lsr	r25
 504:	87 95       	ror	r24
 506:	97 f9       	bld	r25, 7
 508:	08 95       	ret
 50a:	e1 e0       	ldi	r30, 0x01	; 1
 50c:	66 0f       	add	r22, r22
 50e:	77 1f       	adc	r23, r23
 510:	88 1f       	adc	r24, r24
 512:	bb 1f       	adc	r27, r27
 514:	62 17       	cp	r22, r18
 516:	73 07       	cpc	r23, r19
 518:	84 07       	cpc	r24, r20
 51a:	ba 07       	cpc	r27, r26
 51c:	20 f0       	brcs	.+8      	; 0x526 <__divsf3_pse+0xae>
 51e:	62 1b       	sub	r22, r18
 520:	73 0b       	sbc	r23, r19
 522:	84 0b       	sbc	r24, r20
 524:	ba 0b       	sbc	r27, r26
 526:	ee 1f       	adc	r30, r30
 528:	88 f7       	brcc	.-30     	; 0x50c <__divsf3_pse+0x94>
 52a:	e0 95       	com	r30
 52c:	08 95       	ret

0000052e <__fixsfsi>:
 52e:	0e 94 9e 02 	call	0x53c	; 0x53c <__fixunssfsi>
 532:	68 94       	set
 534:	b1 11       	cpse	r27, r1
 536:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__fp_szero>
 53a:	08 95       	ret

0000053c <__fixunssfsi>:
 53c:	0e 94 3a 03 	call	0x674	; 0x674 <__fp_splitA>
 540:	88 f0       	brcs	.+34     	; 0x564 <__fixunssfsi+0x28>
 542:	9f 57       	subi	r25, 0x7F	; 127
 544:	98 f0       	brcs	.+38     	; 0x56c <__fixunssfsi+0x30>
 546:	b9 2f       	mov	r27, r25
 548:	99 27       	eor	r25, r25
 54a:	b7 51       	subi	r27, 0x17	; 23
 54c:	b0 f0       	brcs	.+44     	; 0x57a <__fixunssfsi+0x3e>
 54e:	e1 f0       	breq	.+56     	; 0x588 <__fixunssfsi+0x4c>
 550:	66 0f       	add	r22, r22
 552:	77 1f       	adc	r23, r23
 554:	88 1f       	adc	r24, r24
 556:	99 1f       	adc	r25, r25
 558:	1a f0       	brmi	.+6      	; 0x560 <__fixunssfsi+0x24>
 55a:	ba 95       	dec	r27
 55c:	c9 f7       	brne	.-14     	; 0x550 <__fixunssfsi+0x14>
 55e:	14 c0       	rjmp	.+40     	; 0x588 <__fixunssfsi+0x4c>
 560:	b1 30       	cpi	r27, 0x01	; 1
 562:	91 f0       	breq	.+36     	; 0x588 <__fixunssfsi+0x4c>
 564:	0e 94 54 03 	call	0x6a8	; 0x6a8 <__fp_zero>
 568:	b1 e0       	ldi	r27, 0x01	; 1
 56a:	08 95       	ret
 56c:	0c 94 54 03 	jmp	0x6a8	; 0x6a8 <__fp_zero>
 570:	67 2f       	mov	r22, r23
 572:	78 2f       	mov	r23, r24
 574:	88 27       	eor	r24, r24
 576:	b8 5f       	subi	r27, 0xF8	; 248
 578:	39 f0       	breq	.+14     	; 0x588 <__fixunssfsi+0x4c>
 57a:	b9 3f       	cpi	r27, 0xF9	; 249
 57c:	cc f3       	brlt	.-14     	; 0x570 <__fixunssfsi+0x34>
 57e:	86 95       	lsr	r24
 580:	77 95       	ror	r23
 582:	67 95       	ror	r22
 584:	b3 95       	inc	r27
 586:	d9 f7       	brne	.-10     	; 0x57e <__fixunssfsi+0x42>
 588:	3e f4       	brtc	.+14     	; 0x598 <__fixunssfsi+0x5c>
 58a:	90 95       	com	r25
 58c:	80 95       	com	r24
 58e:	70 95       	com	r23
 590:	61 95       	neg	r22
 592:	7f 4f       	sbci	r23, 0xFF	; 255
 594:	8f 4f       	sbci	r24, 0xFF	; 255
 596:	9f 4f       	sbci	r25, 0xFF	; 255
 598:	08 95       	ret

0000059a <__floatunsisf>:
 59a:	e8 94       	clt
 59c:	09 c0       	rjmp	.+18     	; 0x5b0 <__floatsisf+0x12>

0000059e <__floatsisf>:
 59e:	97 fb       	bst	r25, 7
 5a0:	3e f4       	brtc	.+14     	; 0x5b0 <__floatsisf+0x12>
 5a2:	90 95       	com	r25
 5a4:	80 95       	com	r24
 5a6:	70 95       	com	r23
 5a8:	61 95       	neg	r22
 5aa:	7f 4f       	sbci	r23, 0xFF	; 255
 5ac:	8f 4f       	sbci	r24, 0xFF	; 255
 5ae:	9f 4f       	sbci	r25, 0xFF	; 255
 5b0:	99 23       	and	r25, r25
 5b2:	a9 f0       	breq	.+42     	; 0x5de <__floatsisf+0x40>
 5b4:	f9 2f       	mov	r31, r25
 5b6:	96 e9       	ldi	r25, 0x96	; 150
 5b8:	bb 27       	eor	r27, r27
 5ba:	93 95       	inc	r25
 5bc:	f6 95       	lsr	r31
 5be:	87 95       	ror	r24
 5c0:	77 95       	ror	r23
 5c2:	67 95       	ror	r22
 5c4:	b7 95       	ror	r27
 5c6:	f1 11       	cpse	r31, r1
 5c8:	f8 cf       	rjmp	.-16     	; 0x5ba <__floatsisf+0x1c>
 5ca:	fa f4       	brpl	.+62     	; 0x60a <__floatsisf+0x6c>
 5cc:	bb 0f       	add	r27, r27
 5ce:	11 f4       	brne	.+4      	; 0x5d4 <__floatsisf+0x36>
 5d0:	60 ff       	sbrs	r22, 0
 5d2:	1b c0       	rjmp	.+54     	; 0x60a <__floatsisf+0x6c>
 5d4:	6f 5f       	subi	r22, 0xFF	; 255
 5d6:	7f 4f       	sbci	r23, 0xFF	; 255
 5d8:	8f 4f       	sbci	r24, 0xFF	; 255
 5da:	9f 4f       	sbci	r25, 0xFF	; 255
 5dc:	16 c0       	rjmp	.+44     	; 0x60a <__floatsisf+0x6c>
 5de:	88 23       	and	r24, r24
 5e0:	11 f0       	breq	.+4      	; 0x5e6 <__floatsisf+0x48>
 5e2:	96 e9       	ldi	r25, 0x96	; 150
 5e4:	11 c0       	rjmp	.+34     	; 0x608 <__floatsisf+0x6a>
 5e6:	77 23       	and	r23, r23
 5e8:	21 f0       	breq	.+8      	; 0x5f2 <__floatsisf+0x54>
 5ea:	9e e8       	ldi	r25, 0x8E	; 142
 5ec:	87 2f       	mov	r24, r23
 5ee:	76 2f       	mov	r23, r22
 5f0:	05 c0       	rjmp	.+10     	; 0x5fc <__floatsisf+0x5e>
 5f2:	66 23       	and	r22, r22
 5f4:	71 f0       	breq	.+28     	; 0x612 <__floatsisf+0x74>
 5f6:	96 e8       	ldi	r25, 0x86	; 134
 5f8:	86 2f       	mov	r24, r22
 5fa:	70 e0       	ldi	r23, 0x00	; 0
 5fc:	60 e0       	ldi	r22, 0x00	; 0
 5fe:	2a f0       	brmi	.+10     	; 0x60a <__floatsisf+0x6c>
 600:	9a 95       	dec	r25
 602:	66 0f       	add	r22, r22
 604:	77 1f       	adc	r23, r23
 606:	88 1f       	adc	r24, r24
 608:	da f7       	brpl	.-10     	; 0x600 <__floatsisf+0x62>
 60a:	88 0f       	add	r24, r24
 60c:	96 95       	lsr	r25
 60e:	87 95       	ror	r24
 610:	97 f9       	bld	r25, 7
 612:	08 95       	ret

00000614 <__fp_inf>:
 614:	97 f9       	bld	r25, 7
 616:	9f 67       	ori	r25, 0x7F	; 127
 618:	80 e8       	ldi	r24, 0x80	; 128
 61a:	70 e0       	ldi	r23, 0x00	; 0
 61c:	60 e0       	ldi	r22, 0x00	; 0
 61e:	08 95       	ret

00000620 <__fp_nan>:
 620:	9f ef       	ldi	r25, 0xFF	; 255
 622:	80 ec       	ldi	r24, 0xC0	; 192
 624:	08 95       	ret

00000626 <__fp_pscA>:
 626:	00 24       	eor	r0, r0
 628:	0a 94       	dec	r0
 62a:	16 16       	cp	r1, r22
 62c:	17 06       	cpc	r1, r23
 62e:	18 06       	cpc	r1, r24
 630:	09 06       	cpc	r0, r25
 632:	08 95       	ret

00000634 <__fp_pscB>:
 634:	00 24       	eor	r0, r0
 636:	0a 94       	dec	r0
 638:	12 16       	cp	r1, r18
 63a:	13 06       	cpc	r1, r19
 63c:	14 06       	cpc	r1, r20
 63e:	05 06       	cpc	r0, r21
 640:	08 95       	ret

00000642 <__fp_round>:
 642:	09 2e       	mov	r0, r25
 644:	03 94       	inc	r0
 646:	00 0c       	add	r0, r0
 648:	11 f4       	brne	.+4      	; 0x64e <__fp_round+0xc>
 64a:	88 23       	and	r24, r24
 64c:	52 f0       	brmi	.+20     	; 0x662 <__fp_round+0x20>
 64e:	bb 0f       	add	r27, r27
 650:	40 f4       	brcc	.+16     	; 0x662 <__fp_round+0x20>
 652:	bf 2b       	or	r27, r31
 654:	11 f4       	brne	.+4      	; 0x65a <__fp_round+0x18>
 656:	60 ff       	sbrs	r22, 0
 658:	04 c0       	rjmp	.+8      	; 0x662 <__fp_round+0x20>
 65a:	6f 5f       	subi	r22, 0xFF	; 255
 65c:	7f 4f       	sbci	r23, 0xFF	; 255
 65e:	8f 4f       	sbci	r24, 0xFF	; 255
 660:	9f 4f       	sbci	r25, 0xFF	; 255
 662:	08 95       	ret

00000664 <__fp_split3>:
 664:	57 fd       	sbrc	r21, 7
 666:	90 58       	subi	r25, 0x80	; 128
 668:	44 0f       	add	r20, r20
 66a:	55 1f       	adc	r21, r21
 66c:	59 f0       	breq	.+22     	; 0x684 <__fp_splitA+0x10>
 66e:	5f 3f       	cpi	r21, 0xFF	; 255
 670:	71 f0       	breq	.+28     	; 0x68e <__fp_splitA+0x1a>
 672:	47 95       	ror	r20

00000674 <__fp_splitA>:
 674:	88 0f       	add	r24, r24
 676:	97 fb       	bst	r25, 7
 678:	99 1f       	adc	r25, r25
 67a:	61 f0       	breq	.+24     	; 0x694 <__fp_splitA+0x20>
 67c:	9f 3f       	cpi	r25, 0xFF	; 255
 67e:	79 f0       	breq	.+30     	; 0x69e <__fp_splitA+0x2a>
 680:	87 95       	ror	r24
 682:	08 95       	ret
 684:	12 16       	cp	r1, r18
 686:	13 06       	cpc	r1, r19
 688:	14 06       	cpc	r1, r20
 68a:	55 1f       	adc	r21, r21
 68c:	f2 cf       	rjmp	.-28     	; 0x672 <__fp_split3+0xe>
 68e:	46 95       	lsr	r20
 690:	f1 df       	rcall	.-30     	; 0x674 <__fp_splitA>
 692:	08 c0       	rjmp	.+16     	; 0x6a4 <__fp_splitA+0x30>
 694:	16 16       	cp	r1, r22
 696:	17 06       	cpc	r1, r23
 698:	18 06       	cpc	r1, r24
 69a:	99 1f       	adc	r25, r25
 69c:	f1 cf       	rjmp	.-30     	; 0x680 <__fp_splitA+0xc>
 69e:	86 95       	lsr	r24
 6a0:	71 05       	cpc	r23, r1
 6a2:	61 05       	cpc	r22, r1
 6a4:	08 94       	sec
 6a6:	08 95       	ret

000006a8 <__fp_zero>:
 6a8:	e8 94       	clt

000006aa <__fp_szero>:
 6aa:	bb 27       	eor	r27, r27
 6ac:	66 27       	eor	r22, r22
 6ae:	77 27       	eor	r23, r23
 6b0:	cb 01       	movw	r24, r22
 6b2:	97 f9       	bld	r25, 7
 6b4:	08 95       	ret

000006b6 <__mulsf3>:
 6b6:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__mulsf3x>
 6ba:	0c 94 21 03 	jmp	0x642	; 0x642 <__fp_round>
 6be:	0e 94 13 03 	call	0x626	; 0x626 <__fp_pscA>
 6c2:	38 f0       	brcs	.+14     	; 0x6d2 <__mulsf3+0x1c>
 6c4:	0e 94 1a 03 	call	0x634	; 0x634 <__fp_pscB>
 6c8:	20 f0       	brcs	.+8      	; 0x6d2 <__mulsf3+0x1c>
 6ca:	95 23       	and	r25, r21
 6cc:	11 f0       	breq	.+4      	; 0x6d2 <__mulsf3+0x1c>
 6ce:	0c 94 0a 03 	jmp	0x614	; 0x614 <__fp_inf>
 6d2:	0c 94 10 03 	jmp	0x620	; 0x620 <__fp_nan>
 6d6:	11 24       	eor	r1, r1
 6d8:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__fp_szero>

000006dc <__mulsf3x>:
 6dc:	0e 94 32 03 	call	0x664	; 0x664 <__fp_split3>
 6e0:	70 f3       	brcs	.-36     	; 0x6be <__mulsf3+0x8>

000006e2 <__mulsf3_pse>:
 6e2:	95 9f       	mul	r25, r21
 6e4:	c1 f3       	breq	.-16     	; 0x6d6 <__mulsf3+0x20>
 6e6:	95 0f       	add	r25, r21
 6e8:	50 e0       	ldi	r21, 0x00	; 0
 6ea:	55 1f       	adc	r21, r21
 6ec:	62 9f       	mul	r22, r18
 6ee:	f0 01       	movw	r30, r0
 6f0:	72 9f       	mul	r23, r18
 6f2:	bb 27       	eor	r27, r27
 6f4:	f0 0d       	add	r31, r0
 6f6:	b1 1d       	adc	r27, r1
 6f8:	63 9f       	mul	r22, r19
 6fa:	aa 27       	eor	r26, r26
 6fc:	f0 0d       	add	r31, r0
 6fe:	b1 1d       	adc	r27, r1
 700:	aa 1f       	adc	r26, r26
 702:	64 9f       	mul	r22, r20
 704:	66 27       	eor	r22, r22
 706:	b0 0d       	add	r27, r0
 708:	a1 1d       	adc	r26, r1
 70a:	66 1f       	adc	r22, r22
 70c:	82 9f       	mul	r24, r18
 70e:	22 27       	eor	r18, r18
 710:	b0 0d       	add	r27, r0
 712:	a1 1d       	adc	r26, r1
 714:	62 1f       	adc	r22, r18
 716:	73 9f       	mul	r23, r19
 718:	b0 0d       	add	r27, r0
 71a:	a1 1d       	adc	r26, r1
 71c:	62 1f       	adc	r22, r18
 71e:	83 9f       	mul	r24, r19
 720:	a0 0d       	add	r26, r0
 722:	61 1d       	adc	r22, r1
 724:	22 1f       	adc	r18, r18
 726:	74 9f       	mul	r23, r20
 728:	33 27       	eor	r19, r19
 72a:	a0 0d       	add	r26, r0
 72c:	61 1d       	adc	r22, r1
 72e:	23 1f       	adc	r18, r19
 730:	84 9f       	mul	r24, r20
 732:	60 0d       	add	r22, r0
 734:	21 1d       	adc	r18, r1
 736:	82 2f       	mov	r24, r18
 738:	76 2f       	mov	r23, r22
 73a:	6a 2f       	mov	r22, r26
 73c:	11 24       	eor	r1, r1
 73e:	9f 57       	subi	r25, 0x7F	; 127
 740:	50 40       	sbci	r21, 0x00	; 0
 742:	9a f0       	brmi	.+38     	; 0x76a <__mulsf3_pse+0x88>
 744:	f1 f0       	breq	.+60     	; 0x782 <__mulsf3_pse+0xa0>
 746:	88 23       	and	r24, r24
 748:	4a f0       	brmi	.+18     	; 0x75c <__mulsf3_pse+0x7a>
 74a:	ee 0f       	add	r30, r30
 74c:	ff 1f       	adc	r31, r31
 74e:	bb 1f       	adc	r27, r27
 750:	66 1f       	adc	r22, r22
 752:	77 1f       	adc	r23, r23
 754:	88 1f       	adc	r24, r24
 756:	91 50       	subi	r25, 0x01	; 1
 758:	50 40       	sbci	r21, 0x00	; 0
 75a:	a9 f7       	brne	.-22     	; 0x746 <__mulsf3_pse+0x64>
 75c:	9e 3f       	cpi	r25, 0xFE	; 254
 75e:	51 05       	cpc	r21, r1
 760:	80 f0       	brcs	.+32     	; 0x782 <__mulsf3_pse+0xa0>
 762:	0c 94 0a 03 	jmp	0x614	; 0x614 <__fp_inf>
 766:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__fp_szero>
 76a:	5f 3f       	cpi	r21, 0xFF	; 255
 76c:	e4 f3       	brlt	.-8      	; 0x766 <__mulsf3_pse+0x84>
 76e:	98 3e       	cpi	r25, 0xE8	; 232
 770:	d4 f3       	brlt	.-12     	; 0x766 <__mulsf3_pse+0x84>
 772:	86 95       	lsr	r24
 774:	77 95       	ror	r23
 776:	67 95       	ror	r22
 778:	b7 95       	ror	r27
 77a:	f7 95       	ror	r31
 77c:	e7 95       	ror	r30
 77e:	9f 5f       	subi	r25, 0xFF	; 255
 780:	c1 f7       	brne	.-16     	; 0x772 <__mulsf3_pse+0x90>
 782:	fe 2b       	or	r31, r30
 784:	88 0f       	add	r24, r24
 786:	91 1d       	adc	r25, r1
 788:	96 95       	lsr	r25
 78a:	87 95       	ror	r24
 78c:	97 f9       	bld	r25, 7
 78e:	08 95       	ret

00000790 <__udivmodhi4>:
 790:	aa 1b       	sub	r26, r26
 792:	bb 1b       	sub	r27, r27
 794:	51 e1       	ldi	r21, 0x11	; 17
 796:	07 c0       	rjmp	.+14     	; 0x7a6 <__udivmodhi4_ep>

00000798 <__udivmodhi4_loop>:
 798:	aa 1f       	adc	r26, r26
 79a:	bb 1f       	adc	r27, r27
 79c:	a6 17       	cp	r26, r22
 79e:	b7 07       	cpc	r27, r23
 7a0:	10 f0       	brcs	.+4      	; 0x7a6 <__udivmodhi4_ep>
 7a2:	a6 1b       	sub	r26, r22
 7a4:	b7 0b       	sbc	r27, r23

000007a6 <__udivmodhi4_ep>:
 7a6:	88 1f       	adc	r24, r24
 7a8:	99 1f       	adc	r25, r25
 7aa:	5a 95       	dec	r21
 7ac:	a9 f7       	brne	.-22     	; 0x798 <__udivmodhi4_loop>
 7ae:	80 95       	com	r24
 7b0:	90 95       	com	r25
 7b2:	bc 01       	movw	r22, r24
 7b4:	cd 01       	movw	r24, r26
 7b6:	08 95       	ret

000007b8 <__divmodhi4>:
 7b8:	97 fb       	bst	r25, 7
 7ba:	07 2e       	mov	r0, r23
 7bc:	16 f4       	brtc	.+4      	; 0x7c2 <__divmodhi4+0xa>
 7be:	00 94       	com	r0
 7c0:	07 d0       	rcall	.+14     	; 0x7d0 <__divmodhi4_neg1>
 7c2:	77 fd       	sbrc	r23, 7
 7c4:	09 d0       	rcall	.+18     	; 0x7d8 <__divmodhi4_neg2>
 7c6:	0e 94 c8 03 	call	0x790	; 0x790 <__udivmodhi4>
 7ca:	07 fc       	sbrc	r0, 7
 7cc:	05 d0       	rcall	.+10     	; 0x7d8 <__divmodhi4_neg2>
 7ce:	3e f4       	brtc	.+14     	; 0x7de <__divmodhi4_exit>

000007d0 <__divmodhi4_neg1>:
 7d0:	90 95       	com	r25
 7d2:	81 95       	neg	r24
 7d4:	9f 4f       	sbci	r25, 0xFF	; 255
 7d6:	08 95       	ret

000007d8 <__divmodhi4_neg2>:
 7d8:	70 95       	com	r23
 7da:	61 95       	neg	r22
 7dc:	7f 4f       	sbci	r23, 0xFF	; 255

000007de <__divmodhi4_exit>:
 7de:	08 95       	ret

000007e0 <__divmodsi4>:
 7e0:	05 2e       	mov	r0, r21
 7e2:	97 fb       	bst	r25, 7
 7e4:	1e f4       	brtc	.+6      	; 0x7ec <__divmodsi4+0xc>
 7e6:	00 94       	com	r0
 7e8:	0e 94 07 04 	call	0x80e	; 0x80e <__negsi2>
 7ec:	57 fd       	sbrc	r21, 7
 7ee:	07 d0       	rcall	.+14     	; 0x7fe <__divmodsi4_neg2>
 7f0:	0e 94 0f 04 	call	0x81e	; 0x81e <__udivmodsi4>
 7f4:	07 fc       	sbrc	r0, 7
 7f6:	03 d0       	rcall	.+6      	; 0x7fe <__divmodsi4_neg2>
 7f8:	4e f4       	brtc	.+18     	; 0x80c <__divmodsi4_exit>
 7fa:	0c 94 07 04 	jmp	0x80e	; 0x80e <__negsi2>

000007fe <__divmodsi4_neg2>:
 7fe:	50 95       	com	r21
 800:	40 95       	com	r20
 802:	30 95       	com	r19
 804:	21 95       	neg	r18
 806:	3f 4f       	sbci	r19, 0xFF	; 255
 808:	4f 4f       	sbci	r20, 0xFF	; 255
 80a:	5f 4f       	sbci	r21, 0xFF	; 255

0000080c <__divmodsi4_exit>:
 80c:	08 95       	ret

0000080e <__negsi2>:
 80e:	90 95       	com	r25
 810:	80 95       	com	r24
 812:	70 95       	com	r23
 814:	61 95       	neg	r22
 816:	7f 4f       	sbci	r23, 0xFF	; 255
 818:	8f 4f       	sbci	r24, 0xFF	; 255
 81a:	9f 4f       	sbci	r25, 0xFF	; 255
 81c:	08 95       	ret

0000081e <__udivmodsi4>:
 81e:	a1 e2       	ldi	r26, 0x21	; 33
 820:	1a 2e       	mov	r1, r26
 822:	aa 1b       	sub	r26, r26
 824:	bb 1b       	sub	r27, r27
 826:	fd 01       	movw	r30, r26
 828:	0d c0       	rjmp	.+26     	; 0x844 <__udivmodsi4_ep>

0000082a <__udivmodsi4_loop>:
 82a:	aa 1f       	adc	r26, r26
 82c:	bb 1f       	adc	r27, r27
 82e:	ee 1f       	adc	r30, r30
 830:	ff 1f       	adc	r31, r31
 832:	a2 17       	cp	r26, r18
 834:	b3 07       	cpc	r27, r19
 836:	e4 07       	cpc	r30, r20
 838:	f5 07       	cpc	r31, r21
 83a:	20 f0       	brcs	.+8      	; 0x844 <__udivmodsi4_ep>
 83c:	a2 1b       	sub	r26, r18
 83e:	b3 0b       	sbc	r27, r19
 840:	e4 0b       	sbc	r30, r20
 842:	f5 0b       	sbc	r31, r21

00000844 <__udivmodsi4_ep>:
 844:	66 1f       	adc	r22, r22
 846:	77 1f       	adc	r23, r23
 848:	88 1f       	adc	r24, r24
 84a:	99 1f       	adc	r25, r25
 84c:	1a 94       	dec	r1
 84e:	69 f7       	brne	.-38     	; 0x82a <__udivmodsi4_loop>
 850:	60 95       	com	r22
 852:	70 95       	com	r23
 854:	80 95       	com	r24
 856:	90 95       	com	r25
 858:	9b 01       	movw	r18, r22
 85a:	ac 01       	movw	r20, r24
 85c:	bd 01       	movw	r22, r26
 85e:	cf 01       	movw	r24, r30
 860:	08 95       	ret

00000862 <__itoa_ncheck>:
 862:	bb 27       	eor	r27, r27
 864:	4a 30       	cpi	r20, 0x0A	; 10
 866:	31 f4       	brne	.+12     	; 0x874 <__itoa_ncheck+0x12>
 868:	99 23       	and	r25, r25
 86a:	22 f4       	brpl	.+8      	; 0x874 <__itoa_ncheck+0x12>
 86c:	bd e2       	ldi	r27, 0x2D	; 45
 86e:	90 95       	com	r25
 870:	81 95       	neg	r24
 872:	9f 4f       	sbci	r25, 0xFF	; 255
 874:	0c 94 6e 04 	jmp	0x8dc	; 0x8dc <__utoa_common>

00000878 <__ltoa_ncheck>:
 878:	bb 27       	eor	r27, r27
 87a:	2a 30       	cpi	r18, 0x0A	; 10
 87c:	51 f4       	brne	.+20     	; 0x892 <__ltoa_ncheck+0x1a>
 87e:	99 23       	and	r25, r25
 880:	42 f4       	brpl	.+16     	; 0x892 <__ltoa_ncheck+0x1a>
 882:	bd e2       	ldi	r27, 0x2D	; 45
 884:	90 95       	com	r25
 886:	80 95       	com	r24
 888:	70 95       	com	r23
 88a:	61 95       	neg	r22
 88c:	7f 4f       	sbci	r23, 0xFF	; 255
 88e:	8f 4f       	sbci	r24, 0xFF	; 255
 890:	9f 4f       	sbci	r25, 0xFF	; 255
 892:	0c 94 4c 04 	jmp	0x898	; 0x898 <__ultoa_common>

00000896 <__ultoa_ncheck>:
 896:	bb 27       	eor	r27, r27

00000898 <__ultoa_common>:
 898:	fa 01       	movw	r30, r20
 89a:	a6 2f       	mov	r26, r22
 89c:	62 17       	cp	r22, r18
 89e:	71 05       	cpc	r23, r1
 8a0:	81 05       	cpc	r24, r1
 8a2:	91 05       	cpc	r25, r1
 8a4:	33 0b       	sbc	r19, r19
 8a6:	30 fb       	bst	r19, 0
 8a8:	66 f0       	brts	.+24     	; 0x8c2 <__ultoa_common+0x2a>
 8aa:	aa 27       	eor	r26, r26
 8ac:	66 0f       	add	r22, r22
 8ae:	77 1f       	adc	r23, r23
 8b0:	88 1f       	adc	r24, r24
 8b2:	99 1f       	adc	r25, r25
 8b4:	aa 1f       	adc	r26, r26
 8b6:	a2 17       	cp	r26, r18
 8b8:	10 f0       	brcs	.+4      	; 0x8be <__ultoa_common+0x26>
 8ba:	a2 1b       	sub	r26, r18
 8bc:	63 95       	inc	r22
 8be:	38 50       	subi	r19, 0x08	; 8
 8c0:	a9 f7       	brne	.-22     	; 0x8ac <__ultoa_common+0x14>
 8c2:	a0 5d       	subi	r26, 0xD0	; 208
 8c4:	aa 33       	cpi	r26, 0x3A	; 58
 8c6:	08 f0       	brcs	.+2      	; 0x8ca <__ultoa_common+0x32>
 8c8:	a9 5d       	subi	r26, 0xD9	; 217
 8ca:	a1 93       	st	Z+, r26
 8cc:	36 f7       	brtc	.-52     	; 0x89a <__ultoa_common+0x2>
 8ce:	b1 11       	cpse	r27, r1
 8d0:	b1 93       	st	Z+, r27
 8d2:	10 82       	st	Z, r1
 8d4:	ca 01       	movw	r24, r20
 8d6:	0c 94 87 04 	jmp	0x90e	; 0x90e <strrev>

000008da <__utoa_ncheck>:
 8da:	bb 27       	eor	r27, r27

000008dc <__utoa_common>:
 8dc:	fb 01       	movw	r30, r22
 8de:	55 27       	eor	r21, r21
 8e0:	aa 27       	eor	r26, r26
 8e2:	88 0f       	add	r24, r24
 8e4:	99 1f       	adc	r25, r25
 8e6:	aa 1f       	adc	r26, r26
 8e8:	a4 17       	cp	r26, r20
 8ea:	10 f0       	brcs	.+4      	; 0x8f0 <__utoa_common+0x14>
 8ec:	a4 1b       	sub	r26, r20
 8ee:	83 95       	inc	r24
 8f0:	50 51       	subi	r21, 0x10	; 16
 8f2:	b9 f7       	brne	.-18     	; 0x8e2 <__utoa_common+0x6>
 8f4:	a0 5d       	subi	r26, 0xD0	; 208
 8f6:	aa 33       	cpi	r26, 0x3A	; 58
 8f8:	08 f0       	brcs	.+2      	; 0x8fc <__utoa_common+0x20>
 8fa:	a9 5d       	subi	r26, 0xD9	; 217
 8fc:	a1 93       	st	Z+, r26
 8fe:	00 97       	sbiw	r24, 0x00	; 0
 900:	79 f7       	brne	.-34     	; 0x8e0 <__utoa_common+0x4>
 902:	b1 11       	cpse	r27, r1
 904:	b1 93       	st	Z+, r27
 906:	11 92       	st	Z+, r1
 908:	cb 01       	movw	r24, r22
 90a:	0c 94 87 04 	jmp	0x90e	; 0x90e <strrev>

0000090e <strrev>:
 90e:	dc 01       	movw	r26, r24
 910:	fc 01       	movw	r30, r24
 912:	67 2f       	mov	r22, r23
 914:	71 91       	ld	r23, Z+
 916:	77 23       	and	r23, r23
 918:	e1 f7       	brne	.-8      	; 0x912 <strrev+0x4>
 91a:	32 97       	sbiw	r30, 0x02	; 2
 91c:	04 c0       	rjmp	.+8      	; 0x926 <strrev+0x18>
 91e:	7c 91       	ld	r23, X
 920:	6d 93       	st	X+, r22
 922:	70 83       	st	Z, r23
 924:	62 91       	ld	r22, -Z
 926:	ae 17       	cp	r26, r30
 928:	bf 07       	cpc	r27, r31
 92a:	c8 f3       	brcs	.-14     	; 0x91e <strrev+0x10>
 92c:	08 95       	ret

0000092e <_exit>:
 92e:	f8 94       	cli

00000930 <__stop_program>:
 930:	ff cf       	rjmp	.-2      	; 0x930 <__stop_program>
